function ensureProtocol(url){
    console.log(`ensureProtocol is running with ${url}`); // (start log for incoming value)
    try {
        if(typeof url !== 'string' || !url){ // (validate url is usable string)
            qerrors(new Error('invalid url input'), 'ensureProtocol', url); // (record bad input with context)
            console.log(`ensureProtocol is returning null`); // (log early return path)
            return null; // (gracefully exit when invalid)
        }
        let finalUrl = url; // (hold original url for check)
        const hasProto = /^https?:\/\//i.test(finalUrl); // (case insensitive protocol check)
        if(!hasProto){ finalUrl = 'https://' + finalUrl; } // Default to HTTPS for security
        console.log(`ensureProtocol is returning ${finalUrl}`); // (log return)
        return finalUrl; // Return unchanged if protocol already present
    } catch(error){
        qerrors(error, 'ensureProtocol', url); // (error path logs context)
        return url; // (fallback return original)
    }
}

function normalizeUrlOrigin(url){
    console.log(`normalizeUrlOrigin is running with ${url}`); //(log start)
    try {
        const origin = new URL(ensureProtocol(url)).origin.toLowerCase(); //(convert to normalized origin)
        console.log(`normalizeUrlOrigin is returning ${origin}`); //(log return)
        return origin;
    } catch(error){
        qerrors(error, 'normalizeUrlOrigin', url); //(log error with context)
        return null; //(graceful failure)
    }
}

function stripProtocol(url){
    console.log(`stripProtocol is running with ${url}`); // (log start)
    try {
        const processed = url
            .replace(/^https?:\/\//i, '') // (remove protocol prefix)
            .replace(/\/$/, ''); // (trim trailing slash)
        console.log(`stripProtocol is returning ${processed}`); // (log return)
        return processed;
    } catch(error){
        qerrors(error, 'stripProtocol', url); // (log error)
        return url; // (fallback to original)
    }
}

function parseUrlParts(url){
    console.log(`parseUrlParts is running with ${url}`);
    try {
        const processedUrl = ensureProtocol(url); // (normalize url before parsing)
        if(processedUrl === null){ // (abort if protocol step failed)
            console.log(`parseUrlParts is returning null`); // (log skip due to invalid input)
            return null; // (return early when url invalid)
        }
        const parsed = new URL(processedUrl); // (parse into parts)
        const result = {
            baseUrl: parsed.origin,
            endpoint: parsed.pathname + parsed.search
        };
        console.log(`parseUrlParts is returning ${JSON.stringify(result)}`);
        return result;
    } catch(error){
        qerrors(error, 'parseUrlParts', url);
        return null;
    }
}