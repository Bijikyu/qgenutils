// Date and time formatting utilities for consistent display across the application
// Centralizes date formatting patterns and provides standardized time calculations
// Ensures uniform date presentation and eliminates duplicate formatting logic

/**
 * Formats a date to localized date string with consistent options
 * Provides fallback for invalid or missing dates
 * @param date - Date string, Date object, or null/undefined
 * @param fallback - Text to show when date is invalid or missing
 * @returns Formatted date string or fallback text
 */
export function formatDate(date: string | Date | null | undefined, fallback: string = "Unknown"): string {
  if (!date) return fallback;
  
  try {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    if (isNaN(dateObj.getTime())) return fallback;
    
    return dateObj.toLocaleDateString();
  } catch {
    return fallback;
  }
}

/**
 * Formats a date with relative context (e.g., "Added on 12/25/2023")
 * Commonly used for creation dates in lists and cards
 * @param date - Date string, Date object, or null/undefined
 * @param prefix - Text to prepend to the formatted date
 * @param fallback - Text to show when date is invalid or missing
 * @returns Formatted string with prefix and date
 */
export function formatDateWithPrefix(
  date: string | Date | null | undefined, 
  prefix: string = "Added", 
  fallback: string = "Recently"
): string {
  if (!date) return fallback;
  
  const formattedDate = formatDate(date, "");
  if (!formattedDate || formattedDate === "") return fallback;
  
  return `${prefix} ${formattedDate}`;
}

/**
 * Calculates and formats execution duration in human-readable format
 * Handles both completed and ongoing executions with appropriate time units
 * @param execution - Execution object with startedAt and optional completedAt timestamps
 * @returns Formatted duration string (e.g., "5m", "2h", "45s")
 */
export function formatExecutionDuration(execution: { 
  startedAt?: string | Date; 
  completedAt?: string | Date;
}): string {
  if (!execution.startedAt) return "Not started";
  
  try {
    const start = new Date(execution.startedAt);
    const end = execution.completedAt ? new Date(execution.completedAt) : new Date();
    
    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
      return "Invalid time";
    }
    
    const duration = Math.round((end.getTime() - start.getTime()) / 1000);
    
    if (duration < 60) return `${duration}s`;
    if (duration < 3600) return `${Math.round(duration / 60)}m`;
    return `${Math.round(duration / 3600)}h`;
  } catch {
    return "Invalid time";
  }
}

/**
 * Formats completion date for execution displays
 * Shows formatted date for completed executions, status text for ongoing ones
 * @param execution - Execution object with status and optional completedAt
 * @param runningText - Text to show for ongoing executions
 * @returns Formatted completion date or status text
 */
export function formatCompletionDate(
  execution: { 
    completedAt?: string | Date; 
    status?: string;
  },
  runningText: string = "Running..."
): string {
  if (execution.completedAt) {
    return formatDate(execution.completedAt, "Completed");
  }
  
  // Check if execution is actually running
  if (execution.status === "processing" || execution.status === "in_progress") {
    return runningText;
  }
  
  return "Not completed";
}

/**
 * Formats timestamp for detailed displays
 * Includes both date and time information
 * @param timestamp - Date string, Date object, or null/undefined
 * @param fallback - Text to show when timestamp is invalid or missing
 * @returns Formatted timestamp string
 */
export function formatTimestamp(timestamp: string | Date | null | undefined, fallback: string = "Unknown"): string {
  if (!timestamp) return fallback;
  
  try {
    const dateObj = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;
    if (isNaN(dateObj.getTime())) return fallback;
    
    return dateObj.toLocaleString();
  } catch {
    return fallback;
  }
}

/**
 * Calculates relative time difference (e.g., "5 minutes ago", "2 hours ago")
 * Useful for activity feeds and recent actions
 * @param date - Date string, Date object, or null/undefined
 * @param fallback - Text to show when date is invalid or missing
 * @returns Relative time string
 */
export function formatRelativeTime(date: string | Date | null | undefined, fallback: string = "Unknown"): string {
  if (!date) return fallback;
  
  try {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    if (isNaN(dateObj.getTime())) return fallback;
    
    const now = new Date();
    const diffMs = now.getTime() - dateObj.getTime();
    const diffSeconds = Math.floor(diffMs / 1000);
    const diffMinutes = Math.floor(diffSeconds / 60);
    const diffHours = Math.floor(diffMinutes / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffSeconds < 60) return "Just now";
    if (diffMinutes < 60) return `${diffMinutes} minute${diffMinutes !== 1 ? 's' : ''} ago`;
    if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
    if (diffDays < 7) return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
    
    // For longer periods, fall back to formatted date
    return formatDate(dateObj, fallback);
  } catch {
    return fallback;
  }
}