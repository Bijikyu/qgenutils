/**
 * Sanitize string input by removing potentially dangerous characters
 */
function sanitizeString(input: string): string { //exported via module.exports
  return input
    .trim()
    .replace(/[\x00-\x1F\x7F]/g, '') // Remove control characters
    .replace(/\s+/g, ' '); // Normalize whitespace
}

/**
 * Validate and sanitize pagination parameters
 */
function validatePagination(query: any): { limit: number; offset: number } { //exported via module.exports
  const limitParam = query.limit;
  const offsetParam = query.offset || query.skip;
  
  let limit = VALIDATION_LIMITS.PAGE_SIZE_DEFAULT;
  let offset = 0;
  
  if (limitParam) {
    const parsedLimit = parseInt(limitParam, 10);
    if (isNaN(parsedLimit) || parsedLimit < VALIDATION_LIMITS.PAGE_SIZE_MIN || parsedLimit > VALIDATION_LIMITS.PAGE_SIZE_MAX) {
      throw new Error(`Invalid limit parameter. Must be between ${VALIDATION_LIMITS.PAGE_SIZE_MIN} and ${VALIDATION_LIMITS.PAGE_SIZE_MAX}.`);
    }
    limit = parsedLimit;
  }
  
  if (offsetParam) {
    const parsedOffset = parseInt(offsetParam, 10);
    if (isNaN(parsedOffset) || parsedOffset < 0) {
      throw new Error('Invalid offset parameter. Must be a non-negative integer.');
    }
    offset = parsedOffset;
  }
  
  return { limit, offset };
}

/**
 * Validate MongoDB ObjectId format
 */
function validateObjectId(id: string, fieldName = 'id'): string { //exported via module.exports
  if (!id || typeof id !== 'string') {
    throw new Error(`${fieldName} is required and must be a string.`);
  }
  
  if (!VALIDATION_LIMITS.MONGODB_ID_REGEX.test(id)) {
    throw new Error(`Invalid ${fieldName} format. Must be a valid MongoDB ObjectId.`);
  }
  
  return id;
}

/**
 * Validate GitHub repository format
 */
function validateGitHubRepo(repo: string): string { //exported via module.exports
  if (!repo || typeof repo !== 'string') {
    throw new Error('Repository name is required and must be a string.');
  }
  
  const sanitized = sanitizeString(repo);
  
  if (!VALIDATION_LIMITS.GITHUB_REPO_REGEX.test(sanitized)) {
    throw new Error('Invalid repository format. Must be in format "owner/repo".');
  }
  
  return sanitized;
}

/**
 * Zod schemas for comprehensive validation
 */
const ValidationSchemas = {
  // User validation
  createUser: z.object({
    username: z.string()
      .min(3, 'Username must be at least 3 characters')
      .max(50, 'Username must be less than 50 characters')
      .regex(/^[a-zA-Z0-9_-]+$/, 'Username can only contain letters, numbers, underscores, and hyphens'),
    password: z.string()
      .min(8, 'Password must be at least 8 characters')
      .max(128, 'Password must be less than 128 characters'),
    email: z.string()
      .email('Invalid email format')
      .max(VALIDATION_LIMITS.NAME_MAX_LENGTH, 'Email too long'),
  }),

  // Prompt List validation
  createPromptList: z.object({
    name: z.string()
      .min(1, 'Name is required')
      .max(VALIDATION_LIMITS.NAME_MAX_LENGTH, 'Name too long')
      .transform(sanitizeString),
    description: z.string()
      .max(VALIDATION_LIMITS.DESCRIPTION_MAX_LENGTH, 'Description too long')
      .transform(sanitizeString)
      .optional(),
    userId: z.string()
      .regex(VALIDATION_LIMITS.MONGODB_ID_REGEX, 'Invalid user ID format'),
  }),

  // Prompt validation
  createPrompt: z.object({
    title: z.string()
      .min(1, 'Title is required')
      .max(VALIDATION_LIMITS.NAME_MAX_LENGTH, 'Title too long')
      .transform(sanitizeString),
    description: z.string()
      .max(VALIDATION_LIMITS.DESCRIPTION_MAX_LENGTH, 'Description too long')
      .transform(sanitizeString)
      .optional(),
    content: z.string()
      .min(1, 'Content is required')
      .max(VALIDATION_LIMITS.CONTENT_MAX_LENGTH, 'Content too long'),
    promptListId: z.string()
      .regex(VALIDATION_LIMITS.MONGODB_ID_REGEX, 'Invalid prompt list ID format'),
    order: z.number()
      .int('Order must be an integer')
      .min(VALIDATION_LIMITS.ORDER_MIN, 'Order must be non-negative')
      .max(VALIDATION_LIMITS.ORDER_MAX, 'Order too large')
      .optional(),
  }),

  // Repository validation
  createRepository: z.object({
    name: z.string()
      .min(1, 'Repository name is required')
      .max(VALIDATION_LIMITS.NAME_MAX_LENGTH, 'Repository name too long')
      .transform(sanitizeString),
    url: z.string()
      .url('Invalid URL format')
      .max(VALIDATION_LIMITS.URL_MAX_LENGTH, 'URL too long'),
    owner: z.string()
      .min(1, 'Owner is required')
      .max(100, 'Owner name too long')
      .transform(sanitizeString),
    userId: z.string()
      .regex(VALIDATION_LIMITS.MONGODB_ID_REGEX, 'Invalid user ID format'),
  }),

  // Reorder validation
  reorderPrompts: z.object({
    promptIds: z.array(
      z.string().regex(VALIDATION_LIMITS.MONGODB_ID_REGEX, 'Invalid prompt ID format')
    ).max(VALIDATION_LIMITS.ARRAY_MAX_LENGTH, 'Too many prompts to reorder'),
  }),
};

/**
 * Generic validation middleware wrapper
 */
function validateRequest<T>(schema: z.ZodSchema<T>) { //exported via module.exports
  return (req: any, res: any, next: any) => {
    try {
      const validationResult = schema.safeParse(req.body);
      
      if (!validationResult.success) {
        const errors = validationResult.error.errors.map(err => ({
          field: err.path.join('.'),
          message: err.message,
        }));
        
        return res.status(400).json({
          error: 'Validation failed',
          details: errors,
        });
      }
      
      // Replace req.body with validated and sanitized data
      req.body = validationResult.data;
      next();
    } catch (error) {
      console.error('Validation middleware error:', error);
      res.status(500).json({ error: 'Internal validation error' });
    }
  };
}

/**
 * Validate route parameters
 */
function validateParams(params: Record<string, any>): Record<string, string> { //exported via module.exports
  const validated: Record<string, string> = {};
  
  for (const [key, value] of Object.entries(params)) {
    if (!value || typeof value !== 'string') {
      throw new Error(`Parameter ${key} is required and must be a string.`);
    }
    
    // Validate ID parameters
    if (key.endsWith('Id') || key === 'id') {
      validated[key] = validateObjectId(value, key);
    } else {
      validated[key] = sanitizeString(value);
    }
  }
  
  return validated;
}

/**
 * Rate limiting helper - track requests by IP
 */
const requestCounts = new Map<string, { count: number; resetTime: number }>();

function checkRateLimit(ip: string, maxRequests = 100, windowMs = 60000): boolean { //exported via module.exports
  const now = Date.now();
  const record = requestCounts.get(ip);
  
  if (!record || now > record.resetTime) {
    requestCounts.set(ip, { count: 1, resetTime: now + windowMs });
    return true;
  }
  
  if (record.count >= maxRequests) {
    return false;
  }
  
  record.count++;
  return true;
}

/**
 * Sanitize error messages to prevent information disclosure
 */
function sanitizeErrorMessage(error: any): string { //exported via module.exports
  if (typeof error === 'string') {
    return error;
  }
  
  if (error && typeof error.message === 'string') {
    // Remove potentially sensitive information
    return error.message
      .replace(/\/[a-zA-Z0-9\/._-]+/g, '[PATH]') // Remove file paths
      .replace(/\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/g, '[IP]') // Remove IP addresses
      .replace(/mongodb:\/\/[^\s]+/g, '[DATABASE_URL]') // Remove database URLs
      .substring(0, 200); // Limit message length
  }
  
  return 'An error occurred while processing your request.';
}\nmodule.exports = { VALIDATION_LIMITS, sanitizeString, validatePagination, validateObjectId, validateGitHubRepo, ValidationSchemas, validateRequest, validateParams, checkRateLimit, sanitizeErrorMessage }; //export validation utilities