function createWorker(onInitializedCallback) {
  const worker = new Worker(path.resolve(__dirname, 'classifier.worker.js'));
  worker.isInitialized = false;

  worker.on('message', (message) => {
    const { status, result, error } = message;
    
    if (status === 'initialized') {
      if (!worker.isInitialized) { // Prevent multiple initializations
        worker.isInitialized = true;
        onInitializedCallback();
      }
      return;
    }

    const { task } = worker;
    if (status === 'completed' || status === 'error') {
      if (task) {
        if (status === 'completed') {
          task.resolve(result);
        } else {
          task.reject(new Error(error));
        }
        worker.task = null;
        processNextTask(worker);
      }
    }
  });

  worker.on('error', (err) => {
    console.error(`Worker error: ${err.message}`);
    replaceWorker(worker);
  });

  worker.on('exit', (code) => {
    if (code !== 0) {
      console.error(`Worker stopped with exit code ${code}`);
    }
    replaceWorker(worker);
  });

  worker.postMessage({ type: 'init' });
  return worker;
}

function replaceWorker(deadWorker) {
  if (deadWorker.task) {
    deadWorker.task.reject(new Error('Worker died while processing task.'));
  }

  const workerIndex = workers.findIndex(w => w === deadWorker);
  if (workerIndex !== -1) {
    workers.splice(workerIndex, 1);
  }

  console.log('Replacing a dead worker...');
  const newWorker = createWorker(() => {
      console.log('✅ Replaced worker initialized');
      processNextTask(newWorker);
  });
  workers.push(newWorker);
}

function processNextTask(worker) {
  if (taskQueue.length > 0) {
    const task = taskQueue.shift();
    worker.task = task;
    worker.postMessage(task.buffer, [task.buffer.buffer]);
  }
}

async function init() {
  if (initPromise) {
    return initPromise;
  }

  initPromise = new Promise((resolve) => {
    console.log(`Initializing ${numWorkers} classifier workers...`);
    let initializedWorkers = 0;

    const onInitialized = () => {
        initializedWorkers++;
        if (initializedWorkers === numWorkers) {
            console.log(`✅ All ${numWorkers} classifier workers initialized`);
            resolve();
        }
    };

    for (let i = 0; i < numWorkers; i++) {
      const worker = createWorker(onInitialized);
      workers.push(worker);
    }
  });

  return initPromise;
}

async function classify(buffer) {
  if (!initPromise) {
    throw new Error('Classifier not initialized. Call init() first.');
  }
  await initPromise;

  return new Promise((resolve, reject) => {
    const task = { buffer, resolve, reject };
    const idleWorker = workers.find(w => w.isInitialized && !w.task);

    if (idleWorker) {
      idleWorker.task = task;
      idleWorker.postMessage(buffer, [buffer.buffer]);
    } else {
      taskQueue.push(task);
    }
  });
}

async function terminate() {
  if (workers.length > 0) {
    await Promise.all(workers.map(w => w.terminate()));
    workers.length = 0;
    initPromise = null;
  }
}

module.exports = { init, classify, terminate };